buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.14.+'
    }
}
apply plugin: 'android'

repositories {
    mavenCentral()
}

def codeBuild = getVersionBuild()

android {
    compileSdkVersion 18
    buildToolsVersion "20.0.0"

    lintOptions{
        abortOnError false
    }
    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 18
        versionCode codeBuild
        versionName "1.0." + codeBuild
    }

    sourceSets {
        instrumentTest {
            java.srcDirs = ['androidTest']
            manifest.srcFile file('androidTest/AndroidManifest.xml')
        }
    }

    signingConfigs {
        release {
            codeBuild = saveNewVersionBuild()
            storeFile file("../../key_to_sign_android_cafeter_apk/debug.keystore")
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:19.+'
    compile 'com.squareup.okhttp:okhttp:2.0.0'
    compile 'com.squareup.okhttp:okhttp-urlconnection:2.0.0'
    compile 'com.google.code.gson:gson:2.2.4'
}

def saveNewVersionBuild() {
    def versionPropsFile = file('version.properties')
    if (versionPropsFile.canRead()) {
        def Properties properties = new Properties()
        properties.load(new FileInputStream(versionPropsFile))
        def code = properties['VERSION_CODE'].toInteger() + 1
        properties['VERSION_CODE'] = code.toString()
        properties.store(versionPropsFile.newWriter(), null)
        return code
    } else {
        throw new GradleException("Could not read version.properties!")
    }
}

def getVersionBuild(){
    def versionPropsFile = file('version.properties')
    if (versionPropsFile.canRead()) {
        def Properties properties = new Properties()
        properties.load(new FileInputStream(versionPropsFile))
        def code = properties['VERSION_CODE'].toInteger() + 1
        return code
    } else {
        throw new GradleException("Could not read version.properties!")
    }
}

task prepareWrapper(type: Wrapper) {
    gradleVersion = '2.1'
    distributionUrl = 'alternative.location'
}



